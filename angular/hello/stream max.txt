import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;

public class StreamMaxExample {
    public static void main(String[] args) {
        // Example 1: Finding the maximum in a list of Integers
        List<Integer> numbers = Arrays.asList(10, 45, 2, 30, 5);

        Optional<Integer> maxNumber = numbers.stream()
                                            .max(Integer::compareTo); // Using a method reference for comparison

        if (maxNumber.isPresent()) {
            System.out.println("Maximum Number: " + maxNumber.get()); // Output: Maximum Number: 45
        } else {
            System.out.println("No maximum element found (stream was empty).");
        }

        // Example 2: Finding the maximum in a list of custom objects (e.g., Employees by salary)
        List<Employee> employees = Arrays.asList(
            new Employee("Alice", 50000),
            new Employee("Bob", 75000),
            new Employee("Charlie", 60000)
        );

        Optional<Employee> highestPaidEmployee = employees.stream()
                                                        .max(Comparator.comparing(Employee::getSalary));

        highestPaidEmployee.ifPresent(emp -> System.out.println("Highest paid employee: " + emp.getName() + " with salary: " + emp.getSalary()));
        // Output: Highest paid employee: Bob with salary: 75000
    }
}

class Employee {
    private String name;
    private int salary;

    public Employee(String name, int salary) {
        this.name = name;
        this.salary = salary;
    }

    public String getName() {
        return name;
    }

    public int getSalary() {
        return salary;
    }
}

Java, String::length can be used as a method reference within a lambda expression context, particularly when working with streams or functional interfaces that expect a function taking a String and returning an int.
Example using String::length with Java Streams:
To calculate the sum of lengths of strings in a list using streams:
Java

import java.util.Arrays;
import java.util.List;

public class StringLengthLambda {
    public static void main(String[] args) {
        List<String> words = Arrays.asList("apple", "banana", "cherry");

        // Using String::length as a method reference in mapToInt
        int totalLength = words.stream()
                               .mapToInt(String::length) // Applies String.length() to each string
                               .sum();

        System.out.println("Total length of strings: " + totalLength); // Output: 18
    }
}
Explanation:
words.stream(): Creates a stream of String objects from the words list.
.mapToInt(String::length): This is where String::length is used.
mapToInt is a stream operation that transforms each element of the stream into an int.
String::length is a method reference that points to the length() method of the String class. It effectively acts as a lambda expression s -> s.length(), where s is each String in the stream.

.sum(): Calculates the sum of all the integer values (string lengths) in the IntStream produced by mapToInt.
This demonstrates how String::length provides a concise and readable way to apply the length() method to elements within a stream, leveraging Java's lambda and method reference features.




Java 8, the Integer.compare() method is a static method of the java.lang.Integer class designed to numerically compare two primitive int values.
Syntax:
Java

public static int compare(int x, int y)
Parameters:
x: The first int value to compare.
y: The second int value to compare.
Return Value:
The method returns an int value indicating the numerical relationship between x and y:
0: If x is equal to y (x == y).
A value less than 0 (negative): If x is less than y (x < y).
A value greater than 0 (positive): If x is greater than y (x > y).
Example:
Java

public class IntegerComparison {
    public static void main(String[] args) {
        int a = 10;
        int b = 20;
        int c = 10;
        int d = 5;

        // Compare a and b (10 < 20)
        System.out.println("Comparing " + a + " and " + b + ": " + Integer.compare(a, b)); // Output will be negative

        // Compare a and c (10 == 10)
        System.out.println("Comparing " + a + " and " + c + ": " + Integer.compare(a, c)); // Output will be 0

        // Compare a and d (10 > 5)
        System.out.println("Comparing " + a + " and " + d + ": " + Integer.compare(a, d)); // Output will be positive
    }
}
